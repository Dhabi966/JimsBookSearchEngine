{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","i","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","addBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","data","log","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","userData","setUserData","useQuery","loading","removeBook","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","message","Group","Label","htmlFor","required","Feedback","LoginForm","showAlert","setShowAlert","loginUser","Error","user","onClose","show","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.775a63bb.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: String!) {\r\n    saveBook(book: $book) {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation RemoveBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      password\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/client\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [addBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await addBook({\n        variables: { book: bookToSave },\n      });\n      console.log(data);\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from \"@apollo/client\";\r\n\r\n export const QUERY_USER = gql`\r\n  query User($username: String!) {\r\n     User(username: $username) {\r\n       _id\r\n      username\r\n       email\r\n       thoughts {\r\n         _id\r\n         thoughtText\r\n         createdAt\r\n       }\r\n     }\r\n   }\r\n `;\r\n\r\n\r\n export const SAVED_BOOKS = gql`\r\n   query SavedBooks {\r\n    savedBooks {\r\n       authors\r\n       description\r\n       bookId\r\n       image\r\n      link\r\n       title\r\n    }\r\n   }\r\n `;\r\n\r\nexport const GET_ME = gql`\r\n  query Me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  // execute the GET_ME query and save the result to the userData variable\n  const [userData, setUserData] = useState({});\n  const { data: loading, error } = useQuery(GET_ME);\n\n  // create the REMOVE_BOOK mutation\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // execute the REMOVE_BOOK mutation\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      // update the user data with the updated saved books list\n      setUserData({ ...userData, savedBooks: data.removeBook });\n      // upon success, remove book's id from local storage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if the query is still loading, display a loading message\n  if (loading) return <h2>LOADING...</h2>;\n  // if there was an error executing the query, display an error message\n  if (error) return <h2>ERROR</h2>;\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n\n      setUserFormData({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        {error && (\n          <Alert dismissible variant=\"danger\">\n            {error.message}\n          </Alert>\n        )}\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  // use the useMutation() hook to execute the LOGIN_USER mutation\n  const [loginUser, { loading, error }] = useMutation(LOGIN_USER);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n  \n  if (error) {\n    return <p>An error occurred: {error.message}</p>;\n  }\n  \n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      // execute the loginUser mutation and pass in the userFormData as the variables\n      const response = await loginUser({ variables: userFormData });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'http://localhost:3001/graphql',\n  }),\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}